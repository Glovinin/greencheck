
# Cursor AI Rules - Aqua Vista Monchique Hotel Platform

Voc√™ √© um Desenvolvedor Senior Full-Stack especializado em React, TypeScript, Firebase. Voc√™ est√° trabalhando no Aqua Vista, uma plataforma completa para o hotel com sistema de agendamento interno, gest√£o administrativa e experi√™ncia do cliente.

## üè® Sobre o Projeto Aqua Vista Monchique

### Vis√£o Geral
O Aqua Vista Monchique √© uma plataforma web completa para um hotel de luxo localizado na Serra de Monchique, Portugal. A plataforma oferece uma experi√™ncia digital integrada que abrange desde a apresenta√ß√£o do hotel at√© sistemas complexos de reservas e gest√£o administrativa.

### Hist√≥ria do Hotel
- **Localiza√ß√£o**: Serra de Monchique, Portugal
- **Novo Cap√≠tulo**: Em julho de 2024, o empres√°rio Delmar Santos assumiu a administra√ß√£o
- **Filosofia**: Combina charme r√∫stico com autenticidade, respeitando a natureza local
- **Caracter√≠sticas**: Hotel de luxo com foco em experi√™ncias √∫nicas e hospitalidade excepcional

## üèó Arquitetura da Plataforma

### Stack Tecnol√≥gico Principal
- **Frontend**: Next.js 13+ com App Router, TypeScript, Tailwind CSS
- **UI Components**: Shadcn/UI, Radix UI, Framer Motion (anima√ß√µes)
- **Backend**: Firebase (Authentication, Firestore, Storage)
- **Pagamentos**: Stripe Integration
- **Deploy**: Replit (desenvolvimento e produ√ß√£o)

### Estrutura do Projeto

```
/app
  /admin
    /(protected)     # Rotas protegidas administrativas
      /dashboard     # Dashboard com m√©tricas e estat√≠sticas
      /bookings      # Gest√£o de reservas
      /rooms         # Gest√£o de quartos
      /gallery       # Gest√£o da galeria de imagens
      /messages      # Sistema de mensagens/contatos
      /guests        # Gest√£o de h√≥spedes
      /reports       # Relat√≥rios e analytics
    /login          # Autentica√ß√£o administrativa
  /booking          # Sistema p√∫blico de reservas
  /rooms            # Cat√°logo de quartos
  /gallery          # Galeria p√∫blica
  /contato          # Formul√°rio de contato
  /eventos          # P√°gina de eventos
  /restaurante      # Informa√ß√µes do restaurante
  /sobre            # Sobre o hotel
```

## üéØ Funcionalidades Principais

### √Årea P√∫blica (Website)
1. **Homepage Imersiva**
   - Hero section com v√≠deo background
   - Apresenta√ß√£o do hotel com storytelling
   - CTAs para reservas
   - Galeria de imagens destacadas

2. **Sistema de Reservas Completo**
   - **Step 1**: Sele√ß√£o de quarto com filtros avan√ßados
   - **Step 2**: Calend√°rio inteligente com disponibilidade
   - **Step 3**: Formul√°rio de dados do h√≥spede
   - **Step 4**: Pagamento integrado via Stripe
   - **Step 5**: Confirma√ß√£o e instru√ß√µes

3. **Gest√£o de Disponibilidade**
   - Calend√°rio din√¢mico com pre√ßos por data
   - Bloqueio autom√°tico de datas reservadas
   - Pre√ßos sazonais configur√°veis
   - Verifica√ß√£o em tempo real de conflitos

4. **Experi√™ncia do Usu√°rio**
   - Design responsivo para todos os dispositivos
   - Tema claro/escuro autom√°tico
   - Anima√ß√µes suaves com Framer Motion
   - Loading states e feedback visual

### √Årea Administrativa
1. **Dashboard Executivo**
   - M√©tricas de ocupa√ß√£o em tempo real
   - Revenue tracking
   - Gr√°ficos de performance
   - Alertas e notifica√ß√µes

2. **Gest√£o de Reservas**
   - CRUD completo de reservas
   - Status tracking (pending, confirmed, cancelled)
   - Hist√≥rico de pagamentos
   - Comunica√ß√£o com h√≥spedes

3. **Gest√£o de Quartos**
   - Cadastro e edi√ß√£o de quartos
   - Upload de imagens m√∫ltiplas
   - Gest√£o de comodidades
   - Pre√ßos base e sazonais

4. **Sistema de Galeria**
   - Upload otimizado de imagens
   - Categoriza√ß√£o por se√ß√µes
   - Compress√£o autom√°tica
   - Gest√£o de posi√ß√µes na homepage

## üíæ Modelos de Dados

### Room (Quarto)
```typescript
interface Room {
  id?: string
  name: string
  type: string // standard, deluxe, suite, presidential
  description: string
  price: number // Pre√ßo base
  capacity: number
  size: number
  available: boolean
  featured?: boolean
  serviceFeePct?: number // Taxa de servi√ßo em %
  images: string[]
  amenities: string[]
  additionalServices?: string[]
  highlights?: string[]
  availabilityDates?: { [date: string]: boolean }
  seasonalPrices?: SeasonalPrice[]
  createdAt?: Timestamp
  updatedAt?: Timestamp
}
```

### Booking (Reserva)
```typescript
interface Booking {
  id?: string
  userId?: string
  guestName: string
  guestEmail: string
  guestPhone: string
  roomId: string
  roomName: string
  checkIn: Timestamp
  checkOut: Timestamp
  adults: number
  children: number
  totalPrice: number
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed'
  paymentStatus: 'pending' | 'paid' | 'refunded'
  specialRequests?: string
  createdAt?: Timestamp
  updatedAt?: Timestamp
}
```

### GalleryItem (Item da Galeria)
```typescript
interface GalleryItem {
  id: string
  title: string
  description: string
  image: string
  category: string
  featured: boolean
  displayOrder?: number
  createdAt: number
  isHomeAboutImage?: boolean
  homePosition?: number | null
}
```

## üîß Padr√µes de Desenvolvimento

### Conven√ß√µes de C√≥digo
1. **Componentes**: PascalCase para nomes de componentes
2. **Arquivos**: kebab-case para arquivos utilit√°rios
3. **Hooks**: Sempre come√ßar com 'use'
4. **Types/Interfaces**: PascalCase, interfaces preferencialmente

### Estrutura de Componentes
```typescript
// Padr√£o para componentes React
export default function ComponentName() {
  // 1. Estado local
  const [state, setState] = useState()
  
  // 2. Hooks customizados
  const { user } = useAuth()
  
  // 3. Effects
  useEffect(() => {
    // l√≥gica de efeito
  }, [])
  
  // 4. Handlers
  const handleClick = () => {}
  
  // 5. Early returns
  if (loading) return <Loading />
  
  // 6. Render principal
  return (
    <div>
      {/* JSX */}
    </div>
  )
}
```

### Firebase Integration
- Sempre use as fun√ß√µes helper do `/lib/firebase/firestore.ts`
- Implemente error handling adequado
- Use TypeScript para tipagem de documentos
- Optimize queries com where clauses espec√≠ficas

### UI/UX Guidelines
- Use componentes do Shadcn/UI como base
- Implemente dark/light mode consistency
- Adicione loading states para todas as opera√ß√µes ass√≠ncronas
- Use Framer Motion para micro-anima√ß√µes

## üîê Autentica√ß√£o e Seguran√ßa

### Sistema de Auth
- Firebase Authentication para admins
- Prote√ß√£o de rotas com middleware
- Persist√™ncia de sess√£o opcional
- Reset de senha integrado

### Seguran√ßa de Dados
- Valida√ß√£o client e server-side
- Sanitiza√ß√£o de inputs
- Rate limiting em APIs cr√≠ticas
- Logs de auditoria para a√ß√µes administrativas

## üí≥ Sistema de Pagamentos

### Stripe Integration
- Payment Intents para seguran√ßa
- Suporte a m√∫ltiplos m√©todos (cart√£o, Multibanco, etc.)
- Webhooks para confirma√ß√£o
- Retry logic para falhas

### Fluxo de Pagamento
1. Cria√ß√£o da reserva (status: awaiting_payment)
2. Processo de pagamento via Stripe
3. Webhook confirma pagamento
4. Status atualizado para 'confirmed'
5. Datas bloqueadas automaticamente

## üìä Analytics e M√©tricas

### Dashboard Metrics
- Taxa de ocupa√ß√£o por per√≠odo
- Revenue por quarto/categoria
- Conversion rate do booking flow
- An√°lise de cancelamentos

### Performance Monitoring
- Core Web Vitals tracking
- Error logging e reporting
- User behavior analytics
- System health monitoring

## üöÄ Deployment e DevOps

### Replit Environment
- Deploy autom√°tico na Replit
- Vari√°veis de ambiente via Secrets
- SSL autom√°tico
- CDN integrado

### CI/CD Process
- Git flow padr√£o
- Deploy autom√°tico em push para main
- Rollback capabilities
- Environment isolation

## üìù Instru√ß√µes Espec√≠ficas para o Cursor AI

### Ao Trabalhar com Reservas
- Sempre verificar disponibilidade antes de confirmar
- Implementar timeout para pagamentos pendentes
- Logs detalhados para debugging
- Considerar timezone (Portugal - UTC+1)

### Ao Modificar UI
- Manter consist√™ncia visual entre modo claro/escuro
- Testar responsividade em mobile
- Verificar acessibilidade (ARIA labels)
- Otimizar imagens automaticamente

### Ao Integrar APIs
- Implement proper error handling
- Use TypeScript types
- Add loading states
- Consider offline scenarios

### Performance Best Practices
- Lazy load imagens e componentes
- Implement virtual scrolling para listas grandes
- Cache Firebase queries quando apropriado
- Optimize bundle size

## üé® Design System

### Cores Principais
- Primary: Hotel brand color
- Secondary: Complementary colors
- Accent: Call-to-action highlights
- Neutral: Text and backgrounds

### Typography
- Headings: Font weight 600-700
- Body: Font weight 400-500
- Small text: Font weight 300-400

### Spacing
- Usar sistema de 4px (4, 8, 12, 16, 24, 32, 48, 64)
- Container max-width: 1200px
- Section padding: 64px (desktop), 32px (mobile)

## üîç Debugging e Troubleshooting

### Common Issues
1. **Firebase Connection**: Verificar config e network
2. **Payment Failures**: Check Stripe webhooks e logs
3. **Date Handling**: Timezone considerations
4. **Image Upload**: Size limits e compression

### Logging Strategy
- Console.log para desenvolvimento
- Firebase Analytics para produ√ß√£o
- Error boundaries para React errors
- Stripe webhooks para payment tracking

## üì± Mobile Optimization

### Responsive Design
- Mobile-first approach
- Touch-friendly buttons (44px minimum)
- Swipe gestures para galleries
- Optimized forms para mobile keyboards

### Performance Mobile
- Lazy loading critical
- WebP images quando suportado
- Minimize JavaScript bundle
- Service worker para offline capability

## üåê Internationalization (Future)

### Prepara√ß√£o para i18n
- Avoid hardcoded strings
- Use translation keys
- Consider RTL languages
- Date/currency formatting

---

**Lembre-se**: Este √© um projeto real para um hotel de luxo. Foque na qualidade, performance e experi√™ncia do usu√°rio. Cada linha de c√≥digo representa a marca e reputa√ß√£o do Aqua Vista Monchique.


            
            // Definir média de preço por noite para exibição
>           const filteredNights = getFilteredNightlyPrices();
            const mediaPrecoNoite = filteredNights.length > 0 
              ? filteredTotal / filteredNights.length 
              : 0;
            setRoomPrice(mediaPrecoNoite);
            
            console.log("✅ Resultado do cálculo:", {
>             preçosPorNoite: getFilteredNightlyPrices(),
              totalPrice: filteredTotal,
              totalWithFee: filteredTotal + priceData.serviceFee,
              mediaPrecoNoite
            });
          }, 0);
        }
      } catch (error) {
        console.error("Erro ao calcular preços sazonais:", error);
        
        // Cálculo de fallback usando preço base
        const dias = differenceInDays(date.to, date.from);
        const noites = dias === 0 ? 1 : dias;
        
        const precoBase = quartoSelecionado.price * noites;
        const taxaServicoPercentual = quartoSelecionado.serviceFeePct !== undefined 
          ? Number(quartoSelecionado.serviceFeePct)
          : 10;
        
        const taxaServico = taxaServicoPercentual > 0 ? precoBase * (taxaServicoPercentual / 100) : 0;
        
        setPrecoTotal(precoBase + taxaServico);
        console.log("⚠️ Usando cálculo de fallback:", {
          precoBase,
          taxaServico,
          precoTotal: precoBase + taxaServico
        });
      }
      
      console.log("💰 FIM DO CÁLCULO DE PREÇO TOTAL");
    }
    
    // Função para selecionar quarto
    const selecionarQuarto = (quarto: Room) => {
      console.log("Quarto selecionado com serviceFeePct:", quarto.serviceFeePct);
      setQuartoSelecionado(quarto);
      
      // Buscar dados atualizados do quarto para garantir que temos a taxa de serviço correta
      if (quarto.id) {
        getRoomById(quarto.id).then(quartoAtualizado => {
          if (quartoAtualizado) {
    
    // Função para filtrar noites válidas do período selecionado
>   const getFilteredNightlyPrices = () => {
      if (!date.from || !date.to || nightlyPrices.length === 0) return [];
      
      console.log("🗓️ Filtrando noites para o período:", {
        checkIn: date.from.toISOString(),
        checkOut: date.to.toISOString(),
        totalNights: differenceInDays(date.to, date.from)
      });
      
      console.log("📋 Preços noturnos disponíveis:", nightlyPrices);
      
      // Gerar as datas exatas das noites de estadia
      const stayNights = generateStayNights().map(night => night.toISOString().split('T')[0]);
      
      // Filtrar apenas as noites que correspondem às datas de estadia geradas
      const filtered = nightlyPrices.filter(night => stayNights.includes(night.date));
      
      console.log(`✅ Noites filtradas: ${filtered.length}`, filtered);
      
      return filtered;
    }
    
    // Função para obter total das noites filtradas
    const getFilteredTotalPrice = () => {
>     const filteredPrices = getFilteredNightlyPrices();
      return filteredPrices.reduce((sum, night) => sum + night.price, 0);
    }
    
    // Função para gerar as datas exatas das noites de estadia
    const generateStayNights = () => {
      if (!date.from || !date.to) return [];
      
      const nights = [];
      const numOfNights = Math.max(1, differenceInDays(date.to, date.from));
      
      // Começar com a data de check-in
      const currentDate = new Date(date.from);
      
      // Gerar numOfNights datas começando pela data de check-in
      for (let i = 0; i < numOfNights; i++) {
        nights.push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
      }
      
      console.log("🏨 Noites de estadia geradas:", nights.map(d => d.toISOString().split('T')[0]));
      
      return nights;
    }
    
    return shouldRender ? (
      <main className={`min-h-screen overflow-x-hidden ${isDark ? 'bg-black' : 'bg-gray-50'} pb-32 
md:pb-0`}>
        <Navbar />
        
        {/* Hero Section - Compatível com a homepage */}
        <section className="relative min-h-[100svh] pb-20 md:pb-0">
          <div className="absolute inset-0 overflow-hidden">
            <motion.div
              style={{ 
                y: imageY,
                scale: 1.1
              }}
              className="w-full h-[120%] -mt-10"
            >
              <video
                autoPlay
                                    </div>
                                    <div className="space-y-1 ml-6">
>                                     {getFilteredNightlyPrices().map((night, index) => {
                                        const dateObj = new Date(night.date);
                                        return (
                                          <div key={night.date} className="flex justify-between 
items-center text-sm">
                                            <span>{format(dateObj, "dd/MM/yyyy", { locale: ptBR })} 
({index + 1}ª noite)</span>
                                            <span 
className="font-medium">{formatarPreco(night.price)}</span>
                                          </div>
                                        );
                                      })}
                                    </div>
                                  </div>
                                )}
                                
                                {serviceFee > 0 && (
                                  <div className="flex justify-between items-center pb-3 border-b 
border-border/30">
                                    <div className="flex items-center gap-2">
                                      <CreditCard className="h-4 w-4 text-primary" />
                                      <span className="text-sm">Taxa de serviço</span>
                                    </div>
                                    <span className="font-medium">
                                      {formatarPreco(serviceFee)}
                                    </span>
                                  </div>
                                )}
                                
                                <div className="flex justify-between items-center pt-2">
                                  <div className="flex items-center gap-2">
                                    <CreditCard className="h-5 w-5 text-primary" />
                                    <span className="font-semibold">Total</span>
                                  </div>
                                  <span className="font-bold text-lg text-primary">
                                    {date.from && date.to ? (
                                      // Calcular corretamente baseado nos preços por noite
                                      nightlyPrices.length > 0 
                                        ? formatarPreco(getFilteredTotalPrice() + serviceFee)
                                        : formatarPreco(quartoSelecionado.price * 
differenceInDays(date.to, date.from) + serviceFee)
                                    ) : (
                                      "-"
                                    )}
                                  </span>
                                </div>
                                  <h4 className="text-sm font-semibold">Detalhamento de preços por 
noite</h4>
                                  <div className="space-y-1 text-sm border rounded-md p-3 bg-primary/5">
>                                   {getFilteredNightlyPrices().map((night, index) => {
                                      const dateObj = new Date(night.date);
                                      return (
                                        <div key={night.date} className="flex justify-between 
items-center">
                                          <span>{format(dateObj, "dd/MM/yyyy", { locale: ptBR })} ({index 
+ 1}ª noite)</span>
                                          <span className="font-medium">{formatarPreco(night.price)}</span>
                                        </div>
                                      );
                                    })}
                                    {serviceFee > 0 && (
                                      <>
                                        <div className="h-px bg-border/20 my-2"></div>
                                        <div className="flex justify-between items-center">
                                          <span>Taxa de serviço ({quartoSelecionado.serviceFeePct || 
0}%)</span>
                                          <span className="font-medium">{formatarPreco(serviceFee)}</span>
                                        </div>
                                      </>
                                    )}
                                    <div className="h-px bg-border/20 my-2"></div>
                                    <div className="flex justify-between items-center font-semibold">
                                      <span>Total</span>
                                      <span 
className="text-primary">{formatarPreco(getFilteredTotalPrice() + serviceFee)}</span>
                                    </div>
                                  </div>
                                </div>
                              )}
                              
                              <div className="flex flex-wrap gap-2">
                                {quartoSelecionado.amenities.slice(0, 3).map((amenidade, index) => (
                                  <Badge 
                                    key={index} 
                                    variant="secondary" 
                                    className="rounded-full px-3 py-1 bg-primary/10"
                                  >
                                    {amenidade}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>


